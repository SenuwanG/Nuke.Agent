import subprocess
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
from reportlab.lib import colors

def get_installed_packages():
    try:
        cmd = "dpkg-query -W -f='${Package}\t${Version}\t${Status}\n'"
        result = subprocess.check_output(cmd, shell=True, universal_newlines=True)
        return result.strip().split('\n')
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")
        return []

def is_third_party(status):
    return "manual" not in status.lower() and "install" in status.lower()

def generate_report(installed_packages):
    data = [["Software Name", "Software Version", "VN"]]
    for package_info in installed_packages:
        package, version, status = package_info.split('\t')
        if is_third_party(status):
            data.append([package, version, version])
    return data

def save_report_to_pdf(data, filename="third_party_software_report.pdf"):
    try:
        doc = SimpleDocTemplate(filename, pagesize=letter)
        table = Table(data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.gray),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        doc.build([table])
        print(f"Report saved to {filename}")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    installed_packages = get_installed_packages()
    data = generate_report(installed_packages)
    
    save_to_file = input("Do you want to save the report of third-party installed software to a PDF file? (y/n): ").lower()
    if save_to_file == "y":
        save_report_to_pdf(data)
