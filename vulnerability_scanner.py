import subprocess
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
from reportlab.lib import colors
import requests
from bs4 import BeautifulSoup

def get_installed_packages():
    try:
        cmd = "dpkg-query -W -f='${Package}\t${Version}\t${Version}\n'"
        result = subprocess.check_output(cmd, shell=True, universal_newlines=True)
        return result.strip().split('\n')
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")
        return []

def generate_report(installed_packages):
    data = [["Software Name", "Software Version", "VN", "Vulnerable"]]
    for package_info in installed_packages:
        package, version, vn = package_info.split('\t')
        is_vulnerable = check_vulnerability(package, version)
        data.append([package, version, vn, "Yes" if is_vulnerable else "No"])
    return data

def check_vulnerability(package_name, version):
    try:
        search_query = f"{package_name} {version} exploit database"
        url = f"https://www.exploit-db.com/search?cve=&ghdb=&j0={search_query}&pg=1&ps=20"
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            exploits_found = soup.find('h1', {'class': 'heading'}).text.strip()
            return "no results" not in exploits_found.lower()
    except Exception as e:
        print(f"Error: {e}")
    return False

def save_report_to_pdf(data, filename="software_report.pdf"):
    try:
        doc = SimpleDocTemplate(filename, pagesize=letter)
        table = Table(data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.gray),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        doc.build([table])
        print(f"Report saved to {filename}")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    installed_packages = get_installed_packages()
    data = generate_report(installed_packages)
    
    save_to_file = input("Do you want to save the report to a PDF file? (y/n): ").lower()
    if save_to_file == "y":
        save_report_to_pdf(data)
