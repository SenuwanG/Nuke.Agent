import subprocess
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

def get_installed_packages():
    try:
        cmd = "dpkg-query -W -f='${Package}\t${Version}\n'"
        result = subprocess.check_output(cmd, shell=True, universal_newlines=True)
        return result.strip().split('\n')
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")
        return []

def generate_report(installed_packages):
    report = "Software Report:\n\n"
    for package_info in installed_packages:
        package, version = package_info.split('\t')
        report += f"{package}: {version}\n"
    return report

def save_report_to_pdf(report, filename="software_report.pdf"):
    try:
        c = canvas.Canvas(filename, pagesize=letter)
        c.setFont("Helvetica", 12)
        max_lines_per_page = 50  # Adjust this value based on the available space on the page
        lines = report.splitlines()
        line_count = len(lines)
        current_line = 0
        current_page = 1
        while current_line < line_count:
            text_object = c.beginText(72, 800)  # Starting position of the text
            lines_to_write = lines[current_line:current_line + max_lines_per_page]
            for line in lines_to_write:
                text_object.textLine(line)
            c.drawText(text_object)
            current_line += max_lines_per_page
            if current_line < line_count:
                c.showPage()
                current_page += 1
        c.save()
        print(f"Report saved to {filename}, {current_page} pages.")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    installed_packages = get_installed_packages()
    report = generate_report(installed_packages)
    print(report)

    save_to_file = input("Do you want to save the report to a PDF file? (y/n): ").lower()
    if save_to_file == "y":
        save_report_to_pdf(report)
